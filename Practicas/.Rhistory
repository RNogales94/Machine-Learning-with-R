error
Auto.model <- glm(mpg01~ displacement + horsepower + weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- (t[2,1] + t[1,2]) / (t[1,1]+ t[1,2] + t[2,1] + t[2,2] )
error
Auto.model <- glm(mpg01~  horsepower + weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- (t[2,1] + t[1,2]) / (t[1,1]+ t[1,2] + t[2,1] + t[2,2] )
error
Auto.model <- glm(mpg01~ displacement +  weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- (t[2,1] + t[1,2]) / (t[1,1]+ t[1,2] + t[2,1] + t[2,2] )
error
Auto.model <- glm(mpg01~ displacement + aceleration + horsepower + weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- (t[2,1] + t[1,2]) / (t[1,1]+ t[1,2] + t[2,1] + t[2,2] )
error
Auto.model <- glm(mpg01~ displacement + aceleration +cylinder + horsepower + weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- (t[2,1] + t[1,2]) / (t[1,1]+ t[1,2] + t[2,1] + t[2,2] )
error
Auto.model <- glm(mpg01~ displacement + horsepower + weight + year + name, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- (t[2,1] + t[1,2]) / (t[1,1]+ t[1,2] + t[2,1] + t[2,2] )
error
Auto.model <- glm(mpg01~ displacement + horsepower + weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- (t[2,1] + t[1,2]) / (t[1,1]+ t[1,2] + t[2,1] + t[2,2] )
error
#Creamos los conjuntos TRAIN y TEST
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
set.seed(15)
train <- createDataPartition(Auto$mpg, times = 1, p = 0.8, list = F)
Auto.train <- Auto[train,]
Auto.test <- Auto[-train,]
umbral <- median(Auto$mpg)
mpg01 <- 2*(Auto$mpg > umbral)-1
Auto <- cbind(Auto, mpg01)
Auto.model <- glm(mpg01~ displacement + horsepower + weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- (t[2,1] + t[1,2]) / (t[1,1]+ t[1,2] + t[2,1] + t[2,2] )
error
Auto.model <- glm(mpg01~ displacement + horsepower + weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- 1 - sum(diag(t))/sum(t)
error
Auto.norm <- normaliza(Auto)
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
numerics = sapply(df,is.numeric)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
Auto.norm <- normaliza(Auto)
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
numerics = sapply(df,is.numeric)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
Auto.norm <- normaliza(Auto)
Auto.norm <- scale(Auto)
Auto.norm <- normaliza(Auto[,-"name"])
Auto.norm <- normaliza(Auto[,-Auto$name])
View(Auto)
Auto.norm <- normaliza(Auto[,-9])
Auto.norm <- normaliza(Auto)
Auto.norm <- normaliza(Auto)
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
cat"Hola Cabesa"
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
cat"Hola Pixica"
numerics = sapply(df,is.numeric)
print(numerics)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
cat("Hola Cabesa")
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
cat("Hola Pixica")
numerics = sapply(df,is.numeric)
print(numerics)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
Auto.norm <- normaliza(Auto)
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
numerics = sapply(df,is.numeric)
print(numerics)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
Auto.norm <- normaliza(Auto)
dim(Auto)
Auto.norm <- normaliza(Auto)
dim(Auto)
names(Auto)
Auto.norm <- normaliza(Auto)
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
numerics = sapply(df,is.numeric)
numerics <- which(numerics == TRUE)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
dim(Auto)
names(Auto)
Auto.norm <- normaliza(Auto)
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
numerics = sapply(df,is.numeric)
numerics <- which(numerics == TRUE)
print(numerics)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
dim(Auto)
names(Auto)
Auto.norm <- normaliza(Auto)
Auto
Auto <- Auto[,1:11]
Auto
Auto <- Auto[,1:10]
Auto
dim(Auto)
names(Auto)
Auto.norm <- normaliza(Auto)
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
numerics = sapply(df,is.numeric)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
dim(Auto)
names(Auto)
Auto.norm <- normaliza(Auto)
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
numerics = sapply(df,is.numeric)
numerics <- which(numerics==TRUE)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
Auto.norm2 <- normaliza(Auto)
head(Auto.norm)
head(Auto.norm2)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
knn.mpg <- knn(Auto.train, Auto.test, Auto.train$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
knn.mpg <- knn(Auto.train, Auto.test, Auto$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
knn.mpg <- knn(Auto.train, Auto.test, Auto.train$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
head(Auto.train)
#Creamos los conjuntos TRAIN y TEST
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
set.seed(15)
train <- createDataPartition(Auto$mpg, times = 1, p = 0.8, list = F)
Auto.train <- Auto[train,]
Auto.test <- Auto[-train,]
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
Auto.train <- Auto[train,]
Auto.test <- Auto[-train,]
knn.mpg <- knn(Auto.train, Auto.test, Auto.train$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
#Creamos los conjuntos TRAIN y TEST
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
set.seed(15)
train <- createDataPartition(Auto$mpg, times = 1, p = 0.8, list = F)
Auto.train <- Auto[train,]
Auto.test <- Auto[-train,]
Auto
umbral <- median(Auto$mpg)
mpg01 <- 2*(Auto$mpg > umbral)-1
Auto <- cbind(Auto, mpg01)
Auto.train <- Auto[train,]
Auto.test <- Auto[-train,]
Auto
Auto <- Auto[,1:10]
Auto.model <- glm(mpg01~ displacement + horsepower + weight + year, data = Auto.train)
summary(Auto.model)
mpg.pred <- predict(Auto.model, Auto.test)
mpg.pred.class <- 2*(mpg.pred > 0)-1
t<- table(predict=mpg.pred.class, truth=Auto.test$mpg01)
t
error <- 1 - sum(diag(t))/sum(t)
error
#Añadimos la libreria plyr para usar "numcolwise"
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
normaliza <- function(df){
paramNorm <- function(df){
paramNorm = numcolwise(range)(df)
paramNorm[2,]=paramNorm[2,]-paramNorm[1,]
paramNorm[2,]=ifelse(paramNorm[2,]>0, paramNorm[2,], 1)
paramNorm
}
param <- paramNorm(df)
numerics = sapply(df,is.numeric)
df[, numerics] = scale(df[,numerics],
unlist(param[1,]),
unlist(param[2,]))
df
}
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
knn.mpg <- knn(Auto.train, Auto.test, Auto.train$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
Auto.norm[train,]
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
knn.mpg <- knn(train = Auto.norm[train,-nombre], Auto.norm[-train,-nombre], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
knn.mpg <- knn(train = Auto.norm[train,-"name"], Auto.norm[-train,-"name"], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
knn.mpg <- knn(train = Auto.norm[train,-9], Auto.norm[-train,-9], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
tune.knn(Auto.norm[train,], Auto.norm[-test,]k = 1:10)
#El -9 es para quitar la columna de "name"
knn.mpg <- knn(train = Auto.norm[train,-9], Auto.norm[-train,-9], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
tune.knn(Auto.norm[train,], Auto.norm[-test,], k = 1:10)
#El -9 es para quitar la columna de "name"
knn.mpg <- knn(train = Auto.norm[train,-9], Auto.norm[-train,-9], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
tune.knn(Auto.norm, Auto.norm$mpg01, k = 1:10)
#El -9 es para quitar la columna de "name"
knn.mpg <- knn(train = Auto.norm[train,-9], Auto.norm[-train,-9], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto)
tune.knn(Auto.norm[,-9], Auto.norm$mpg01, k = 1:10)
#El -9 es para quitar la columna de "name"
knn.mpg <- knn(train = Auto.norm[train,-9], Auto.norm[-train,-9], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, Auto.norm$mpg01, k = 1:10)
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, Auto.norm$mpg01, k = 1:10)
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10)
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "class"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=1)
error <- mean(knn.mpg != Auto.test$mpg01)
error
head(Auto.norm)
Auto.norm
which(Auto$mpg01==1) == which(Auto.norm$mpg01 ==1)
which(Auto$mpg01==-1) == which(Auto.norm$mpg01 ==0)
which(Auto$mpg01==-1) == which(Auto.norm$mpg01 ==1)
which(Auto$mpg01==-1) == which(Auto.norm$mpg01 ==0)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=100)
error <- mean(knn.mpg != Auto.test$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.test$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.norm[train,]$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.norm[train,mpg01])
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.norm[train,"mpg01"])
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.norm[train,length(Auto.norm)])
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.norm[train,]$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.norm[train,]$mpg01)
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tk <- tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
summary(tk)
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto.norm[train,]$mpg01, k=3)
error <- mean(knn.mpg != Auto.norm[train,]$mpg01)
error
Auto
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tk <- tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
summary(tk)
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto[train,10], k=3)
error <- mean(knn.mpg != Auto.norm[train,10])
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tk <- tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
summary(tk)
knn.mpg <- knn(train = Auto.norm[train,], Auto.norm[-train,], Auto[train,10], k=3)
error <- mean(knn.mpg != Auto[train,10])
error
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Auto.norm <- normaliza(Auto[,-9])
tk <- tune.knn(Auto.norm, as.factor(Auto.norm$mpg01), k = 1:10, tunecontrol= tune.control(sampling = "cross"))
summary(tk)
Auto
install.packages("ROCR")
library("ROCR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ROCR::rocplot
rocplot
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rocplot
detach("package:caTools", unload=TRUE)
